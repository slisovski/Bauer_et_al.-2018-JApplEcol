{
    "collab_server" : "",
    "contents" : "setClass(\n  \"SDPMig\",\n  slots = c(Name    = \"character\",\n            Init    = \"list\",\n            Species = \"list\",\n            Sites   = \"list\", \n            Results = \"list\")\n)\n\nCalcTR <- function(x, t) {\n  TR <- approx(parms$xFTReward, parms$yFTReward, t, rule = 2)$y\n  s  <- parms$w * (x - parms$xc) \n  \n  if(x == 0) { SR <- 0 } else {\n    SR <- (((exp(s) - exp(-s)) / (exp(s) + exp(-s))) + 1)/2\n  }\n  TR * SR + parms$B0\n}\n\n\nmakeSDPmig <- function(parms, project = \"\") {\n  \n  sparms <- read.csv(parms$path, skip = 2, sep = \";\", dec = \".\")\n  r_gain.x <- as.matrix(sparms[,which(substring(names(sparms), 1,1)==\"x\")])\n  r_gain.y <- as.matrix(sparms[,which(substring(names(sparms), 1,1)==\"y\")])\n  r_gain.p <- matrix(sparms$stoch, ncol = ncol(r_gain.x), nrow = nrow(r_gain.y))\n  r_dist   <- geosphere::distm(cbind(sparms$Lon, sparms$Lat), cbind(sparms$Lon, sparms$Lat))/1000\n  \n  new(\n    \"SDPMig\",\n    Name = project,\n    Init = list(\n      MaxT   = parms$MaxT,\n      NSites = parms$NSites,\n      MaxX   = parms$MaxX\n    ),\n    Species = list(\n      B0    = parms$B0,\n      w     = parms$w,\n      xc    = parms$xc,\n      c     = parms$c,\n      speed = parms$speed,\n      WindAssist = parms$WindAssist,\n      WindProb   = parms$WindProb,\n      ZStdNorm   = parms$ZStdNorm,\n      PStdNorm   = parms$PStdNorm,\n      xFTReward  = parms$xFTReward,\n      yFTReward  = parms$yFTReward,\n      decError   = parms$decError\n    ),\n    Sites = list(\n      crds = cbind(sparms$Lon, sparms$Lat),\n      dist = r_dist,\n      b0   = sparms$b0,\n      b1   = sparms$b1,\n      b2   = sparms$b2,\n      expend  =  sparms$expend,\n      pred_a1 =  parms$pred_a1,\n      pred_a2 =  parms$pred_a2,\n      gain    = list(gain.x = r_gain.x, \n                     gain.y = r_gain.y, \n                     gain.p = r_gain.p)\n    ),\n    Results = list(\n      FitnessMatrix     = NA,\n      DecisionMatrix    = NA,\n      ProbMatrix        = NA\n    )\n  )\n\n}\n\n\n### Backward iteration\n\nbwdIteration <- function(obj) {\n  \n  Init(obj@Init$MaxT, obj@Init$NSites, obj@Init$MaxX,\n       obj@Species$w,obj@Species$xc,obj@Species$B0,obj@Sites$b0,obj@Sites$b1,obj@Sites$b2,obj@Sites$pred_a1,obj@Sites$pred_a2,\n       obj@Species$c,obj@Species$speed,obj@Species$WindAssist,obj@Species$WindProb,\n       obj@Species$ZStdNorm,obj@Species$PStdNorm,\n       obj@Species$xFTReward,obj@Species$yFTReward,\n       obj@Species$decError,\n       obj@Sites$dist,\n       obj@Sites$gain[[1]],obj@Sites$gain[[2]],obj@Sites$gain[[3]],obj@Sites$expend)\n  \n  out <- BackwardIteration()\n  \n  obj@Results$FitnessMatrix <- out[[1]]\n  DM <- array(dim = c(dim(out[[2]]),2))\n  DM[,,,1] <- out[[2]] \n  DM[,,,2] <- out[[3]]\n  obj@Results$DecisionMatrix <- DM  \n  PM <- array(dim = c(dim(out[[4]]),2))\n  PM[,,,1] <- out[[4]] \n  PM[,,,2] <- out[[5]] \n  obj@Results$ProbMatrix <- PM\n  \n  obj \n}\n\n\n\n############################\n#### Forward Simulation#####\n############################\n\nMigSim <- function(obj, NrInd, start_t, start_site, start_x) {\n  \n  InitSim(obj@Init$MaxT, obj@Init$NSites, obj@Init$MaxX,\n          obj@Species$w,obj@Species$xc,obj@Species$B0,obj@Sites$b0,obj@Sites$b1,obj@Sites$b2,obj@Sites$pred_a1,obj@Sites$pred_a2,\n          obj@Species$c,obj@Species$speed,obj@Species$WindAssist,obj@Species$WindProb,\n          obj@Species$ZStdNorm,obj@Species$PStdNorm,\n          obj@Species$xFTReward,obj@Species$yFTReward,\n          obj@Species$decError,\n          obj@Sites$dist,\n          obj@Sites$gain[[1]],obj@Sites$gain[[2]],obj@Sites$gain[[3]],obj@Sites$expend,\n          obj@Results$FitnessMatrix,\n          obj@Results$DecisionMatrix[,,,1], obj@Results$DecisionMatrix[,,,2],\n          obj@Results$ProbMatrix[,,,1], obj@Results$ProbMatrix[,,,2])\n\n  forwardSim(NrInd, start_t-1, start_site-1, start_x)\n  \n}\n\n\n############################\n### Plotting ###############\n############################\n\n\nfitnessPlot <- function(x, cond = c(20, 80)) {\n  \n  opar <- par(oma = c(0,1,1,4), mar = c(4,5,2,1))\n  opar <- par(fig=c(0,0.5,0.5,1))\n  plot(NA, xlim = c(0.5, x@Init$NSites+0.5), ylim = c(1, x@Init$MaxT), yaxt = \"n\", ylab = \"time\", xlab = \"\", xaxs = \"i\", yaxs = \"i\")\n  image(x = 1:(x@Init$NSites+1), y = 0:x@Init$MaxT,\n        t(x@Results$FitnessMatrix[,,cond[1]])[,nrow(x@Results$FitnessMatrix[,,cond[1]]):1],\n        breaks = seq(x@Species$B0-0.1, max(x@Results$FitnessMatrix[,,x@Init$MaxX+1]+0.1, na.rm = T), length = 100),\n        col = rev(heat.colors(99)), add = T)\n  axis(2, at = seq(1, x@Init$MaxT, length = 10), labels = seq(x@Init$MaxT, 1, length = 10), las = 1)\n  mtext(paste0(\"Fitness: x = \", cond[1]), 3, line = 1)\n  \n  opar <- par(fig=c(0.5,1,0.5,1), new = T)\n  plot(NA, xlim = c(0.5, x@Init$NSites+0.5), ylim = c(1, x@Init$MaxT), yaxt = \"n\", ylab = \"\", xlab = \"\", xaxs = \"i\", yaxs = \"i\")\n  image(x = 1:(x@Init$NSites+1), y = 0:x@Init$MaxT,\n        t(x@Results$FitnessMatrix[,,cond[2]])[,nrow(x@Results$FitnessMatrix[,,cond[2]]):1],\n        breaks = seq(x@Species$B0-0.1, max(x@Results$FitnessMatrix[,,x@Init$MaxX+1]+0.1, na.rm = T), length = 100),\n        col = rev(heat.colors(99)), add = T)\n  mtext(paste0(\"Fitness: x = \", cond[2]), 3, line = 1)\n  axis(2, at = seq(1, x@Init$MaxT, length = 10), labels = seq(x@Init$MaxT, 1, length = 10), las = 1)\n  image.plot(t(x@Results$FitnessMatrix[,,cond[2]])[,nrow(x@Results$FitnessMatrix[,,cond[2]]):1],\n             breaks = seq(x@Species$B0-0.1, max(x@Results$FitnessMatrix[,,x@Init$MaxX+1]+0.1, na.rm = T), length = 100),\n             col = rev(heat.colors(99)), legend.only = T, legend.mar = 0)\n  \n  opar <- par(fig=c(0,1,0,0.5), new = T, mar = c(5, 5, 4, 1))\n  plot(NA, xlim = c(1, x@Init$MaxT), ylim = c(0, max(x@Sites$gain[[2]], na.rm = T)), xlab = \"t\", ylab = \"gain\")\n  matplot(x = t(x@Sites$gain[[1]]), y = t(x@Sites$gain[[2]]), type = \"l\", lwd = 1.4, lty = 1, col = rainbow(nrow(x@Sites$gain[[2]])),\n          add = T, xlab = \"\", ylab = \"\")\n  legend(1, x@Init$NSites+1, paste0(\"site \", c(1, x@Init$NSites-1)), pch = 16, col = rainbow(nrow(x@Sites$gain[[2]]))[c(1,x@Init$NSites-1)],\n         horiz = T, bty = \"n\", xpd = T, cex = 0.8)\n  par(opar)\n}\n\n\nfitnessSitePlot <- function(x, mfrow = c(3,3)) {\n  \n  opar <- par(mfrow = mfrow, mar = c(0,0,0,0), oma = c(4,4,1,4), new = F)\n  for(i in 1:(x@Init$NSites+1)) {\n    matplot(1:dim(x@Results$FitnessMatrix)[3], x@Results$FitnessMatrix[,i,-1], pch = 16, type = \"p\", cex = 1.25, \n            col = viridis::inferno(dim(x@Results$FitnessMatrix)[3], alpha = 0.8), ylim = c(0, max(x@Results$FitnessMatrix, na.rm = T)),\n            xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\")\n    \n    if(i==1) axis(2, las = 1)\n    if(i==(mfrow^2)[1]) axis(1)\n    \n    par(new = T)\n    if(i!=(x@Init$NSites+1)) {\n      plot(x@Sites$gain[[1]][i,], x@Sites$gain[[2]][i,], type = \"l\", lty = 2, lwd = 2, col = \"darkgreen\",\n           xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\", ylim = c(0, max(x@Sites$gain[[2]], na.rm = T)))\n    }\n    \n    if(i==(mfrow)[1]) axis(4, las = 1)\n  }\n  \n  mtext(\"Time\",   1, outer= T, line = 2)\n  mtext(\"Reward\", 2, outer= T, line = 2)  \n  mtext(\"Gain\",   4, outer= T, line = 2)  \n  par(opar)\n  \n}\n\n\ndecisionPlot <- function(x, time = c(5, 40, 80)) {\n  \n  opar <- par(fig=c(0,0.33,0.5,1), mar = c(.5,.5,.5,.5), oma = c(3,3,2,2), new = F)\n  plot(NA, xlim = c(0, x@Init$MaxX), ylim = c(1, x@Init$NSites), xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\", xaxs = \"i\")\n  \n  tmp2 <- abs(t(x@Results$DecisionMatrix[,time[1],,1])+1)\n  \n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), tmp2, \n        add = T, col = rev(heat.colors(99)), breaks = seq(0, 1, length = 100))\n  \n  ind  <- runif(length(as.vector(tmp2))) < t(x@Results$ProbMatrix[,time[1],,1])\n  tmp1 <- t(x@Results$ProbMatrix[,time[1],,1])\n  tmp1[ind] <- NA\n  \n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), tmp1, \n       add = T, col = grey(0:8/8), breaks = seq(0, 1, length = 10))\n  \n  axis(1, labels = F)\n  axis(2, at = 1:x@Init$NSites, labels = T, las = 1)\n  mtext(paste(\"t =\", time[1]), 3, line = 0.5)\n  \n  opar <- par(fig=c(0.33,0.66,0.5,1), mar = c(.5,.5,.5,.5), oma = c(3,3,2,2), new = T)\n  plot(NA, xlim = c(0, x@Init$MaxX), ylim = c(1, x@Init$NSites), xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\", xaxs = \"i\")\n  \n  tmp2 <- abs(t(x@Results$DecisionMatrix[,time[2],,1])+1)\n  \n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), tmp2, \n       add = T, col = rev(heat.colors(99)), breaks = seq(0, 1, length = 100))\n  \n  ind  <- runif(length(as.vector(tmp1))) < t(x@Results$ProbMatrix[,time[2],,1])\n  tmp1 <- t(x@Results$ProbMatrix[,time[2],,1])\n  tmp1[ind] <- NA\n   \n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), tmp1, \n       add = T, col = grey(0:8/8), breaks = seq(0, 1, length = 10))\n   \n  \n  axis(1, labels = F)\n  axis(2, at = 1:x@Init$NSites, labels = F)\n  mtext(paste(\"t =\", time[2]), 3, line = 0.5)\n  \n  opar <- par(fig=c(0.66,1,0.5,1), mar = c(.5,.5,.5,.5), oma = c(3,3,2,2), new = T)\n  plot(NA, xlim = c(0, x@Init$MaxX), ylim = c(1, x@Init$NSites), xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\", xaxs = \"i\")\n  \n  tmp2 <- abs(t(x@Results$DecisionMatrix[,time[3],,1])+1)\n  \n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), tmp2, \n        add = T, col = rev(heat.colors(99)), breaks = seq(0, 1, length = 100))\n  \n  ind  <- runif(length(as.vector(tmp1))) < t(x@Results$ProbMatrix[,time[3],,1])\n  tmp1 <- t(x@Results$ProbMatrix[,time[3],,1])\n  tmp1[ind] <- NA\n  \n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), tmp1, \n       add = T, col = grey(0:8/8), breaks = seq(0, 1, length = 10))\n   \n  axis(1, labels = F)\n  axis(2, at = 1:x@Init$NSites, labels = F)\n  mtext(paste(\"t =\", time[3]), 3, line = 0.5)\n  \n  opar <- par(fig=c(0,0.33,0,0.5), new = T)\n  plot(NA, xlim = c(0, x@Init$MaxX), ylim = c(1, x@Init$NSites+1), xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\", xaxs = \"i\")\n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), t(x@Results$DecisionMatrix[,time[1],,2]+1), \n        add = T, col = rainbow(x@Init$NSites), breaks = c(0:x@Init$NSites+1))\n  axis(1, labels = T)\n  axis(2, at = 1:x@Init$NSites)\n  \n  opar <- par(fig=c(0.33,0.66,0,0.5), new = T)\n  plot(NA, xlim = c(0, x@Init$MaxX), ylim = c(1, x@Init$NSites+1), xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\", xaxs = \"i\")\n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), t(x@Results$DecisionMatrix[,time[2],,2])+1, \n        add = T, col = rainbow(x@Init$NSites+1), breaks = c(0:(x@Init$NSites+1)))\n  axis(1, labels = F)\n  axis(2, at = 1:x@Init$NSites, labels = F)\n  \n  opar <- par(fig=c(0.66,1,0,0.5), new = T)\n  plot(NA, xlim = c(0, x@Init$MaxX), ylim = c(1, x@Init$NSites+1), xaxt = \"n\", yaxt = \"n\", xlab = \"\", ylab = \"\", xaxs = \"i\")\n  image(x = 0:x@Init$MaxX, y = 1:(x@Init$NSites+1), t(x@Results$DecisionMatrix[,time[3],,2])+1, \n        add = T, col = rainbow(x@Init$NSites+1), breaks = c(0:(x@Init$NSites+1)))\n  axis(1, labels = T)\n  axis(2, at = 1:x@Init$NSites, labels = F)\n  \n  mtext(\"site\", 2, outer = T, line = 1.5, cex = 1.2)\n  mtext(\"condition(x)\", 1, outer = T, line = 1.5, cex = 1.2)\n  \n  legend(\"topright\", as.character(1:x@Init$NSites), pch = 16, col = rainbow(x@Init$NSites))\n  \n  \n  par(opar)\n  \n}\n\n\nsimuPlot <- function(simu, sdpM, fun = \"median\") {\n  \n  opar <- par(mfrow = c(3,1), mar = c(4,4,1,1))\n  plot(NA, xlim = c(0, sdpM@Init$MaxT+1), ylim = c(1, sdpM@Init$NSites+1), bty = \"n\", xlab = \"time\", ylab = \"site\", \n       yaxt = \"n\", las = 1, cex.lab  = 1.2)\n  axis(2, at = 1:sdpM@Init$NSites)\n  for(i in 1:dim(simu)[1]) {\n    tmp <- t(simu[i,,])\n    if(sum(tmp[,5])>0) tmp <- tmp[1:(min(which(tmp[,5]==1))),]\n    lines(tmp[,1], tmp[,2]+1, lwd = 2, col = rgb(0.4,0.6,0.9, alpha = 0.5))\n    if(sum(tmp[,5])>0) {\n      points(tmp[nrow(tmp),1], tmp[nrow(tmp),2]+1, pch = \"x\") \n    }  else {\n      points(tmp[nrow(tmp),1], tmp[nrow(tmp),2]+1, col = rgb(0.4,0.6,0.9, alpha = 0.5), pch = 16)\n    }\n  }\n  legend(\"topleft\", \"death\", pch = \"x\", bty = \"n\")\n  \n  \n  plot(NA, xlim = c(0, sdpM@Init$MaxT+1), ylim = c(1, sdpM@Init$MaxX), bty = \"n\", xlab = \"time\", ylab = \"condition\", \n       las = 1, cex.lab  = 1.2, bty = \"o\")\n  \n  for(i in 1:dim(simu)[1]) {\n    tmp <- simu[i,,]\n    tmp <- tmp[,tmp[5,]!=1]\n    if(!is.null(nrow(tmp))) lines(tmp[1,], tmp[3,], col = adjustcolor(\"grey60\", alpha.f = 0.6))\n  }\n  for(i in 1:dim(simu)[1]) {\n    tmp <- simu[i,,]\n    tmp <- tmp[,!is.na(tmp[2,]) & tmp[5,]!=1]\n    if(!is.null(nrow(tmp))) points(tmp[1,], tmp[3,], col = c(rainbow(sdpM@Init$NSites+1, alpha = 0.6)[tmp[2,]+1]), pch = 16) else {\n      points(tmp[1], tmp[3], col = c(rainbow(sdpM@Init$NSites, alpha = 0.6)[tmp[2]]), pch = 16) \n    }\n  }\n  \n  legend(\"topleft\", paste(\"site\", 1:sdpM@Init$NSites), pch = 16, col = rainbow(sdpM@Init$NSites))\n  \n  res <- matrix(NA, ncol = sdpM@Init$NSites+1, nrow = dim(simu)[1])\n    \n  for(i in 1:nrow(res)) {\n      tmp <- simu[i,,]\n      if(sum(tmp[5,])>0) tmp <- tmp[,1:(min(which(tmp[5,]==1)))]\n      res[i,] <- apply(cbind(0:sdpM@Init$NSites), 1, function(x) {\n        ifelse(all(tmp[2,]<x) , NA, sum(tmp[2,]==x, na.rm = T))\n      })\n  }\n\n  plot(NA, xlim = c(1, sdpM@Init$NSites), ylim = c(0, max(res, na.rm = T)), xlab = \"time\", ylab = \"days\")\n  matplot(t(res[,-ncol(res)]), type = \"b\", pch = 16, cex = 1.5, lty = 1, lwd = 1, col = adjustcolor(\"grey60\", alpha.f = 0.7), add = T)\n  \n  points(1:(sdpM@Init$NSites), apply(res[,-ncol(res)], 2, fun, na.rm = T), type = \"b\", cex = 3, pch = 16, col = adjustcolor(\"firebrick\", alpha.f = 0.9))\n  \n  par(opar)\n  \n  res\n}\n\n",
    "created" : 1499759833281.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3660533978",
    "id" : "E123DA8C",
    "lastKnownWriteTime" : 1500042480,
    "last_content_update" : 1500042480964,
    "path" : "~/Dropbox/Science/Projects/SOI_Projects/SDPmig/InfectedMigration/RPackage/SDPmig/R/SDPmigR.R",
    "project_path" : "R/SDPmigR.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}